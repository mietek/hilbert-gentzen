module STLCBidirectionalDerivationsForTypeChecking where

open import Prelude
open import Vec
open import STLCTypes
open import STLCDerivations
open import STLCBidirectionalTermsForTypeChecking


--------------------------------------------------------------------------------


infix 4 _โฆ_โช_
record TypeChecking : Set
  where
    constructor _โฆ_โช_
    field
      {g} : Nat
      ฮ   : Types g
      M   : Termโ g
      A   : Type


infix 4 _โฆ_โซ_
record TypeInference : Set
  where
    constructor _โฆ_โซ_
    field
      {g} : Nat
      ฮ   : Types g
      M   : Termแตฃ g
      A   : Type


--------------------------------------------------------------------------------


mutual
  infix 3 โข_checks
  data โข_checks : TypeChecking โ Set
    where
      lam : โ {A B g M} โ {ฮ : Types g}
                        โ โข ฮ , A โฆ M โช B checks
                        โ โข ฮ โฆ LAM M โช A โ B checks

      inf : โ {A g M} โ {ฮ : Types g}
                      โ โข ฮ โฆ M โซ A infers
                      โ โข ฮ โฆ INF M โช A checks

  infix 3 โข_infers
  data โข_infers : TypeInference โ Set
    where
      var : โ {A g I} โ {ฮ : Types g}
                      โ ฮ โโจ I โฉ A
                      โ โข ฮ โฆ VAR I โซ A infers

      app : โ {A B g M N} โ {ฮ : Types g}
                          โ โข ฮ โฆ M โซ A โ B infers โ โข ฮ โฆ N โช A checks
                          โ โข ฮ โฆ APP M N โซ B infers

      chk : โ {A g M} โ {ฮ : Types g}
                      โ โข ฮ โฆ M โช A checks
                      โ โข ฮ โฆ CHK M A โซ A infers


--------------------------------------------------------------------------------


mutual
  renโ : โ {g gโฒ e M A} โ {ฮ : Types g} {ฮโฒ : Types gโฒ}
                        โ ฮโฒ โโจ e โฉ ฮ โ โข ฮ โฆ M โช A checks
                        โ โข ฮโฒ โฆ RENโ e M โช A checks
  renโ ฮท (lam ๐) = lam (renโ (keep ฮท) ๐)
  renโ ฮท (inf ๐) = inf (renแตฃ ฮท ๐)

  renแตฃ : โ {g gโฒ e M A} โ {ฮ : Types g} {ฮโฒ : Types gโฒ}
                        โ ฮโฒ โโจ e โฉ ฮ โ โข ฮ โฆ M โซ A infers
                        โ โข ฮโฒ โฆ RENแตฃ e M โซ A infers
  renแตฃ ฮท (var i)   = var (renโ ฮท i)
  renแตฃ ฮท (app ๐ โฐ) = app (renแตฃ ฮท ๐) (renโ ฮท โฐ)
  renแตฃ ฮท (chk ๐)   = chk (renโ ฮท ๐)


wkแตฃ : โ {B g M A} โ {ฮ : Types g}
                  โ โข ฮ โฆ M โซ A infers
                  โ โข ฮ , B โฆ WKแตฃ M โซ A infers
wkแตฃ ๐ = renแตฃ (drop idโ) ๐


vzแตฃ : โ {A g} โ {ฮ : Types g}
              โ โข ฮ , A โฆ VZแตฃ โซ A infers
vzแตฃ = var zero


--------------------------------------------------------------------------------
