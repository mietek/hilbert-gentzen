module StdS4TTTermsLemmas where

open import Prelude
open import Category
open import Fin
open import FinLemmas
open import Vec
open import VecLemmas
open import StdS4TTTerms


--------------------------------------------------------------------------------
{-
                             REN id‚â• M ‚â° M                                      id-REN   ‚é± ùêëùêÑùêç
                       REN (e‚ÇÅ ‚àò e‚ÇÇ) M ‚â° REN e‚ÇÇ (REN e‚ÇÅ M)                      comp-REN ‚é∞
                 (REN (keep e) ‚àò WK) M ‚â° (WK ‚àò REN e) M                         comp-WK-REN-keep

                            MREN id‚â• M ‚â° M                                      id-MREN   ‚é± ùêåùêëùêÑùêç
                      MREN (e‚ÇÅ ‚àò e‚ÇÇ) M ‚â° MREN e‚ÇÇ (MREN e‚ÇÅ M)                    comp-MREN ‚é∞
                       MREN (drop e) M ‚â° (MWK ‚àò MREN e) M                       comp-MWK-MREN-drop
               (MREN (keep e) ‚àò MWK) M ‚â° (MWK ‚àò MREN e) M                       comp-MWK-MREN-keep

                  (MREN e‚ÇÅ ‚àò REN e‚ÇÇ) M ‚â° (REN e‚ÇÇ ‚àò MREN e‚ÇÅ) M                   comp-REN-MREN
                (MRENS e‚ÇÅ ‚àò RENS e‚ÇÇ) x ‚â° (RENS e‚ÇÇ ‚àò MRENS e‚ÇÅ) x                 comp-RENS-MRENS
                   (MRENS e ‚àò LIFTS) x ‚â° (LIFTS ‚àò MRENS e) x                    comp-LIFTS-MRENS

                            RENS id‚â• x ‚â° x                                      id-RENS   ‚é± ùêëùêÑùêçùêí
                      RENS (e‚ÇÅ ‚àò e‚ÇÇ) x ‚â° (RENS e‚ÇÇ ‚àò RENS e‚ÇÅ) x                  comp-RENS ‚é∞
               (RENS (keep e) ‚àò WKS) x ‚â° (WKS ‚àò RENS e) x                       comp-WKS-RENS-keep
             (RENS (keep e) ‚àò LIFTS) x ‚â° (LIFTS ‚àò RENS e) x                     comp-LIFTS-RENS

                           MRENS id‚â• x ‚â° x                                      id-MRENS   ‚é± ùêåùêëùêÑùêçùêí
                     MRENS (e‚ÇÅ ‚àò e‚ÇÇ) x ‚â° (MRENS e‚ÇÇ ‚àò MRENS e‚ÇÅ) x                comp-MRENS ‚é∞
                      MRENS (drop e) x ‚â° (MWKS ‚àò MRENS e) x                     comp-MWKS-MRENS-drop
             (MRENS (keep e) ‚àò MWKS) x ‚â° (MWKS ‚àò MRENS e) x                     comp-MWKS-MRENS-keep

                          MRENS‚ÇÅ id‚â• x ‚â° x                                      id-MRENS‚ÇÅ   ‚é± ùêåùêëùêÑùêçùêí‚ÇÅ
                    MRENS‚ÇÅ (e‚ÇÅ ‚àò e‚ÇÇ) x ‚â° (MRENS‚ÇÅ e‚ÇÇ ‚àò MRENS‚ÇÅ e‚ÇÅ) x              comp-MRENS‚ÇÅ ‚é∞
           (MRENS‚ÇÅ (keep e) ‚àò MWKS‚ÇÅ) x ‚â° (MWKS‚ÇÅ ‚àò MRENS‚ÇÅ e) x                   comp-MWKS‚ÇÅ-MRENS‚ÇÅ-keep
         (MRENS‚ÇÅ (keep e) ‚àò MLIFTS‚ÇÅ) x ‚â° (MLIFTS‚ÇÅ ‚àò MRENS‚ÇÅ e) x                 comp-MLIFTS‚ÇÅ-MRENS‚ÇÅ

                      GET (RENS e x) i ‚â° (REN e ‚àò GET x) i                      comp-REN-GET
                   GET (IDS {d = d}) i ‚â° VAR i                                  VAR-id-GET

                     GET (MRENS e x) i ‚â° (MREN e ‚àò GET x) i                     comp-MREN-GET

                    GET (MRENS‚ÇÅ e x) i ‚â° (MREN e ‚àò GET x) i                     comp-MREN-GET‚ÇÅ
                           GET MIDS‚ÇÅ i ‚â° MVAR i                                 MVAR-id-GET‚ÇÅ

                   GETS (RENS e‚ÇÅ x) e‚ÇÇ ‚â° (RENS e‚ÇÅ ‚àò GETS x) e‚ÇÇ                  comp-RENS-GETS
               GETS (LIFTS x) (keep e) ‚â° (LIFTS ‚àò GETS x) e                     comp-LIFTS-GETS

                  GETS (MRENS e‚ÇÅ x) e‚ÇÇ ‚â° (MRENS e‚ÇÅ ‚àò GETS x) e‚ÇÇ                 comp-MRENS-GETS

                 GETS (MRENS‚ÇÅ e‚ÇÅ x) e‚ÇÇ ‚â° (MRENS‚ÇÅ e‚ÇÅ ‚àò GETS x) e‚ÇÇ                comp-MRENS‚ÇÅ-GETS
             GETS (MLIFTS‚ÇÅ x) (keep e) ‚â° (MLIFTS‚ÇÅ ‚àò GETS x) e                   comp-MLIFTS‚ÇÅ-GETS

                      GET (SUBS x y) i ‚â° (SUB x ‚àò GET y) i                      comp-SUB-GET

                     GET (MSUBS x y) i ‚â° (MSUB x ‚àò GET y) i                     comp-MSUB-GET

                    GET (MSUBS‚ÇÅ x y) i ‚â° (MSUB x ‚àò GET y) i                     comp-MSUB-GET‚ÇÅ

                      SUB (GETS x e) M ‚â° (SUB x ‚àò REN e) M                      comp-SUB-REN

                    SUB (x , M) (WK N) ‚â° SUB x N                                expand-SUB
                  SUBS (x , M) (WKS y) ‚â° SUBS x y                               expand-SUBS

                      SUB (RENS e x) M ‚â° (REN e ‚àò SUB x) M                      comp-REN-SUB
                     SUBS (RENS e x) y ‚â° (RENS e ‚àò SUBS x) y                    comp-RENS-SUBS
              SUBS (LIFTS x) (LIFTS y) ‚â° (LIFTS ‚àò SUBS x) y                     comp-LIFTS-SUBS

                   SUB (MRENS e IDS) M ‚â° M                                      id-MREN-SUB
            SUB (MRENS e x) (MREN e M) ‚â° (MREN e ‚àò SUB x) M                     comp-MREN-SUB
          SUBS (MRENS e x) (MRENS e y) ‚â° (MRENS e ‚àò SUBS x) y                   comp-MRENS-SUBS

                             SUB IDS M ‚â° M                                      id-SUB   ‚é± ùêíùêîùêÅ
                      SUB (SUBS x y) M ‚â° (SUB x ‚àò SUB y) M                      comp-SUB ‚é∞
                            SUBS IDS x ‚â° x                                      lid-SUBS   ‚é´
                            SUBS x IDS ‚â° x                                      rid-SUBS   ‚é¨ ùêíùüíùêìùêûùê´ùê¶ùê¨
                     SUBS (SUBS x y) z ‚â° SUBS x (SUBS y z)                      assoc-SUBS ‚é≠

                    (REN e ‚àò MSUB x) M ‚â° (MSUB x ‚àò REN e) M                     comp-MSUB-REN
                  (RENS e ‚àò MSUBS x) y ‚â° (MSUBS x ‚àò RENS e) y                   comp-MSUBS-RENS
                   (LIFTS ‚àò MSUBS x) y ‚â° (MSUBS x ‚àò LIFTS) y                    comp-MSUBS-LIFTS

                     MSUB (GETS x e) M ‚â° (MSUB x ‚àò MREN e) M                    comp-MSUB-MREN

                  MSUB (x , M) (MWK N) ‚â° MSUB x N                               expand-MSUB
                MSUBS (x , M) (MWKS y) ‚â° MSUBS x y                              expand-MSUBS
              MSUBS‚ÇÅ (x , M) (MWKS‚ÇÅ y) ‚â° MSUBS‚ÇÅ x y                             expand-MSUBS‚ÇÅ

                   MSUB (MRENS‚ÇÅ e x) M ‚â° (MREN e ‚àò MSUB x) M                    comp-MREN-MSUB
                  MSUBS (MRENS‚ÇÅ e x) y ‚â° (MRENS e ‚àò MSUBS x) y                  comp-MRENS-MSUBS
          (MSUBS (MLIFTS‚ÇÅ x) ‚àò MWKS) y ‚â° (MWKS ‚àò MSUBS x) y                     comp-MWKS-MSUBS
                 MSUBS‚ÇÅ (MRENS‚ÇÅ e x) y ‚â° (MRENS‚ÇÅ e ‚àò MSUBS‚ÇÅ x) y                comp-MRENS‚ÇÅ-MSUBS‚ÇÅ
        (MSUBS‚ÇÅ (MLIFTS‚ÇÅ x) ‚àò MWKS‚ÇÅ) y ‚â° (MWKS‚ÇÅ ‚àò MSUBS‚ÇÅ x) y                   comp-MWKS‚ÇÅ-MSUBS‚ÇÅ
      (MSUBS‚ÇÅ (MLIFTS‚ÇÅ x) ‚àò MLIFTS‚ÇÅ) y ‚â° (MLIFTS‚ÇÅ ‚àò MSUBS‚ÇÅ x) y                 comp-MLIFTS‚ÇÅ-MSUBS‚ÇÅ

          (SUB (MSUBS x y) ‚àò MSUB x) M ‚â° (MSUB x ‚àò SUB y) M                     comp-MSUB-SUB

                          MSUB MIDS‚ÇÅ M ‚â° M                                      id-MSUB   ‚é± ùêåùêíùêîùêÅ
                   MSUB (MSUBS‚ÇÅ x y) M ‚â° (MSUB x ‚àò MSUB y) M                    comp-MSUB ‚é∞
                        MSUBS‚ÇÅ MIDS‚ÇÅ x ‚â° x                                      lid-MSUBS‚ÇÅ   ‚é´
                        MSUBS‚ÇÅ x MIDS‚ÇÅ ‚â° x                                      rid-MSUBS‚ÇÅ   ‚é¨ ùêíùüíùêìùêûùê´ùê¶ùê¨‚ÇÅ
                 MSUBS‚ÇÅ (MSUBS‚ÇÅ x y) z ‚â° MSUBS‚ÇÅ x (MSUBS‚ÇÅ y z)                  assoc-MSUBS‚ÇÅ ‚é≠
-}
--------------------------------------------------------------------------------


id-REN : ‚àÄ {d g} ‚Üí (M : Term d g)
                 ‚Üí REN id‚â• M ‚â° M
id-REN (VAR i)      = VAR & id-REN‚àã i
id-REN (LAM M)      = LAM & id-REN M
id-REN (APP M N)    = APP & id-REN M ‚äó id-REN N
id-REN (MVAR i)     = refl
id-REN (BOX M)      = refl
id-REN (LETBOX M N) = LETBOX & id-REN M ‚äó id-REN N


comp-REN : ‚àÄ {d g g‚Ä≤ g‚Ä≥} ‚Üí (e‚ÇÅ : g‚Ä≤ ‚â• g) (e‚ÇÇ : g‚Ä≥ ‚â• g‚Ä≤) (M : Term d g)
                         ‚Üí REN (e‚ÇÅ ‚àò e‚ÇÇ) M ‚â° REN e‚ÇÇ (REN e‚ÇÅ M)
comp-REN e‚ÇÅ e‚ÇÇ (VAR i)      = VAR & comp-REN‚àã e‚ÇÅ e‚ÇÇ i
comp-REN e‚ÇÅ e‚ÇÇ (LAM M)      = LAM & comp-REN (keep e‚ÇÅ) (keep e‚ÇÇ) M
comp-REN e‚ÇÅ e‚ÇÇ (APP M N)    = APP & comp-REN e‚ÇÅ e‚ÇÇ M ‚äó comp-REN e‚ÇÅ e‚ÇÇ N
comp-REN e‚ÇÅ e‚ÇÇ (MVAR i)     = refl
comp-REN e‚ÇÅ e‚ÇÇ (BOX M)      = refl
comp-REN e‚ÇÅ e‚ÇÇ (LETBOX M N) = LETBOX & comp-REN e‚ÇÅ e‚ÇÇ M ‚äó comp-REN e‚ÇÅ e‚ÇÇ N


ùêëùêÑùêç : Presheaf (\ g ‚Üí Œ£ Nat (\ d ‚Üí Term d g))
               (\ { e (d , M) ‚Üí d , REN e M })
ùêëùêÑùêç = record
        { id‚Ñ±   = funext! (\ { (d , M) ‚Üí (d ,_) & id-REN M })
        ; comp‚Ñ± = \ e‚ÇÅ e‚ÇÇ ‚Üí funext! (\ { (d , M) ‚Üí (d ,_) & comp-REN e‚ÇÅ e‚ÇÇ M })
        }


comp-WK-REN-keep : ‚àÄ {d g g‚Ä≤} ‚Üí (e : g‚Ä≤ ‚â• g) (M : Term d g)
                              ‚Üí (REN (keep e) ‚àò WK) M ‚â° (WK ‚àò REN e) M
comp-WK-REN-keep e M = comp-REN (drop id‚â•) (keep e) M ‚Åª¬π
                     ‚ãÆ (\ e‚Ä≤ ‚Üí REN (drop e‚Ä≤) M) & (lid‚àò e ‚ãÆ rid‚àò e ‚Åª¬π)
                     ‚ãÆ comp-REN e (drop id‚â•) M


--------------------------------------------------------------------------------


id-MREN : ‚àÄ {d g} ‚Üí (M : Term d g)
                  ‚Üí MREN id‚â• M ‚â° M
id-MREN (VAR i)      = refl
id-MREN (LAM M)      = LAM & id-MREN M
id-MREN (APP M N)    = APP & id-MREN M ‚äó id-MREN N
id-MREN (MVAR i)     = MVAR & id-REN‚àã i
id-MREN (BOX M)      = BOX & id-MREN M
id-MREN (LETBOX M N) = LETBOX & id-MREN M ‚äó id-MREN N


comp-MREN : ‚àÄ {d d‚Ä≤ d‚Ä≥ g} ‚Üí (e‚ÇÅ : d‚Ä≤ ‚â• d) (e‚ÇÇ : d‚Ä≥ ‚â• d‚Ä≤) (M : Term d g)
                          ‚Üí MREN (e‚ÇÅ ‚àò e‚ÇÇ) M ‚â° MREN e‚ÇÇ (MREN e‚ÇÅ M)
comp-MREN e‚ÇÅ e‚ÇÇ (VAR i)      = refl
comp-MREN e‚ÇÅ e‚ÇÇ (LAM M)      = LAM & comp-MREN e‚ÇÅ e‚ÇÇ M
comp-MREN e‚ÇÅ e‚ÇÇ (APP M N)    = APP & comp-MREN e‚ÇÅ e‚ÇÇ M ‚äó comp-MREN e‚ÇÅ e‚ÇÇ N
comp-MREN e‚ÇÅ e‚ÇÇ (MVAR i)     = MVAR & comp-REN‚àã e‚ÇÅ e‚ÇÇ i
comp-MREN e‚ÇÅ e‚ÇÇ (BOX M)      = BOX & comp-MREN e‚ÇÅ e‚ÇÇ M
comp-MREN e‚ÇÅ e‚ÇÇ (LETBOX M N) = LETBOX & comp-MREN e‚ÇÅ e‚ÇÇ M ‚äó comp-MREN (keep e‚ÇÅ) (keep e‚ÇÇ) N


ùêåùêëùêÑùêç : Presheaf (\ d ‚Üí Œ£ Nat (\ g ‚Üí Term d g))
                (\ { e (g , M) ‚Üí g , MREN e M })
ùêåùêëùêÑùêç = record
         { id‚Ñ±   = funext! (\ { (g , M) ‚Üí (g ,_) & id-MREN M })
         ; comp‚Ñ± = \ e‚ÇÅ e‚ÇÇ ‚Üí funext! (\ { (g , M) ‚Üí (g ,_) & comp-MREN e‚ÇÅ e‚ÇÇ M })
         }


comp-MWK-MREN-drop : ‚àÄ {d d‚Ä≤ g} ‚Üí (e : d‚Ä≤ ‚â• d) (M : Term d g)
                                ‚Üí MREN (drop e) M ‚â° (MWK ‚àò MREN e) M
comp-MWK-MREN-drop e M = (\ e‚Ä≤ ‚Üí MREN (drop e‚Ä≤) M) & rid‚àò e ‚Åª¬π
                       ‚ãÆ comp-MREN e (drop id‚â•) M


comp-MWK-MREN-keep : ‚àÄ {d d‚Ä≤ g} ‚Üí (e : d‚Ä≤ ‚â• d) (M : Term d g)
                                ‚Üí (MREN (keep e) ‚àò MWK) M ‚â° (MWK ‚àò MREN e) M
comp-MWK-MREN-keep e M = comp-MREN (drop id‚â•) (keep e) M ‚Åª¬π
                       ‚ãÆ (\ e‚Ä≤ ‚Üí MREN (drop e‚Ä≤) M) & (lid‚àò e ‚ãÆ rid‚àò e ‚Åª¬π)
                       ‚ãÆ comp-MREN e (drop id‚â•) M


--------------------------------------------------------------------------------


comp-REN-MREN : ‚àÄ {d d‚Ä≤ g g‚Ä≤} ‚Üí (e‚ÇÅ : d‚Ä≤ ‚â• d) (e‚ÇÇ : g‚Ä≤ ‚â• g) (M : Term d g)
                              ‚Üí (MREN e‚ÇÅ ‚àò REN e‚ÇÇ) M ‚â° (REN e‚ÇÇ ‚àò MREN e‚ÇÅ) M
comp-REN-MREN e‚ÇÅ e‚ÇÇ (VAR i)      = refl
comp-REN-MREN e‚ÇÅ e‚ÇÇ (LAM M)      = LAM & comp-REN-MREN e‚ÇÅ (keep e‚ÇÇ) M
comp-REN-MREN e‚ÇÅ e‚ÇÇ (APP M N)    = APP & comp-REN-MREN e‚ÇÅ e‚ÇÇ M ‚äó comp-REN-MREN e‚ÇÅ e‚ÇÇ N
comp-REN-MREN e‚ÇÅ e‚ÇÇ (MVAR i)     = refl
comp-REN-MREN e‚ÇÅ e‚ÇÇ (BOX M)      = refl
comp-REN-MREN e‚ÇÅ e‚ÇÇ (LETBOX M N) = LETBOX & comp-REN-MREN e‚ÇÅ e‚ÇÇ M ‚äó comp-REN-MREN (keep e‚ÇÅ) e‚ÇÇ N


comp-RENS-MRENS : ‚àÄ {d d‚Ä≤ g g‚Ä≤ n} ‚Üí (e‚ÇÅ : d‚Ä≤ ‚â• d) (e‚ÇÇ : g‚Ä≤ ‚â• g) (x : Terms d g n)
                                  ‚Üí (MRENS e‚ÇÅ ‚àò RENS e‚ÇÇ) x ‚â° (RENS e‚ÇÇ ‚àò MRENS e‚ÇÅ) x
comp-RENS-MRENS e‚ÇÅ e‚ÇÇ ‚àô       = refl
comp-RENS-MRENS e‚ÇÅ e‚ÇÇ (x , M) = _,_ & comp-RENS-MRENS e‚ÇÅ e‚ÇÇ x ‚äó comp-REN-MREN e‚ÇÅ e‚ÇÇ M


comp-LIFTS-MRENS : ‚àÄ {d d‚Ä≤ g n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms d g n)
                                ‚Üí (MRENS e ‚àò LIFTS) x ‚â° (LIFTS ‚àò MRENS e) x
comp-LIFTS-MRENS e x = (_, VZ) & comp-RENS-MRENS e (drop id‚â•) x


--------------------------------------------------------------------------------


id-RENS : ‚àÄ {d g n} ‚Üí (x : Terms d g n)
                    ‚Üí RENS id‚â• x ‚â° x
id-RENS ‚àô       = refl
id-RENS (x , M) = _,_ & id-RENS x ‚äó id-REN M


comp-RENS : ‚àÄ {d g g‚Ä≤ g‚Ä≥ n} ‚Üí (e‚ÇÅ : g‚Ä≤ ‚â• g) (e‚ÇÇ : g‚Ä≥ ‚â• g‚Ä≤) (x : Terms d g n)
                            ‚Üí RENS (e‚ÇÅ ‚àò e‚ÇÇ) x ‚â° (RENS e‚ÇÇ ‚àò RENS e‚ÇÅ) x
comp-RENS e‚ÇÅ e‚ÇÇ ‚àô       = refl
comp-RENS e‚ÇÅ e‚ÇÇ (x , M) = _,_ & comp-RENS e‚ÇÅ e‚ÇÇ x ‚äó comp-REN e‚ÇÅ e‚ÇÇ M


ùêëùêÑùêçùêí : ‚àÄ {n} ‚Üí Presheaf (\ g ‚Üí Œ£ Nat (\ d ‚Üí Terms d g n))
                         (\ { e (d , x) ‚Üí d , RENS e x })
ùêëùêÑùêçùêí = record
         { id‚Ñ±   = funext! (\ { (d , x) ‚Üí (d ,_) & id-RENS x })
         ; comp‚Ñ± = \ e‚ÇÅ e‚ÇÇ ‚Üí funext! (\ { (d , x) ‚Üí (d ,_) & comp-RENS e‚ÇÅ e‚ÇÇ x })
         }


comp-WKS-RENS-keep : ‚àÄ {d g g‚Ä≤ n} ‚Üí (e : g‚Ä≤ ‚â• g) (x : Terms d g n)
                                  ‚Üí (RENS (keep e) ‚àò WKS) x ‚â° (WKS ‚àò RENS e) x
comp-WKS-RENS-keep e ‚àô       = refl
comp-WKS-RENS-keep e (x , M) = _,_ & comp-WKS-RENS-keep e x ‚äó comp-WK-REN-keep e M


comp-LIFTS-RENS : ‚àÄ {d g g‚Ä≤ n} ‚Üí (e : g‚Ä≤ ‚â• g) (x : Terms d g n)
                               ‚Üí (RENS (keep e) ‚àò LIFTS) x ‚â° (LIFTS ‚àò RENS e) x
comp-LIFTS-RENS e x = (_, VZ) & comp-WKS-RENS-keep e x


--------------------------------------------------------------------------------


id-MRENS : ‚àÄ {d g n} ‚Üí (x : Terms d g n)
                     ‚Üí MRENS id‚â• x ‚â° x
id-MRENS ‚àô       = refl
id-MRENS (x , M) = _,_ & id-MRENS x ‚äó id-MREN M


comp-MRENS : ‚àÄ {d d‚Ä≤ d‚Ä≥ g n} ‚Üí (e‚ÇÅ : d‚Ä≤ ‚â• d) (e‚ÇÇ : d‚Ä≥ ‚â• d‚Ä≤) (x : Terms d g n)
                             ‚Üí MRENS (e‚ÇÅ ‚àò e‚ÇÇ) x ‚â° (MRENS e‚ÇÇ ‚àò MRENS e‚ÇÅ) x
comp-MRENS e‚ÇÅ e‚ÇÇ ‚àô       = refl
comp-MRENS e‚ÇÅ e‚ÇÇ (x , M) = _,_ & comp-MRENS e‚ÇÅ e‚ÇÇ x ‚äó comp-MREN e‚ÇÅ e‚ÇÇ M


ùêåùêëùêÑùêçùêí : ‚àÄ {n} ‚Üí Presheaf (\ d ‚Üí Œ£ Nat (\ g ‚Üí Terms d g n))
                          (\ { e (g , x) ‚Üí g , MRENS e x })
ùêåùêëùêÑùêçùêí = record
          { id‚Ñ±   = funext! (\ { (g , x) ‚Üí (g ,_) & id-MRENS x })
          ; comp‚Ñ± = \ e‚ÇÅ e‚ÇÇ ‚Üí funext! (\ { (g , x) ‚Üí (g ,_) & comp-MRENS e‚ÇÅ e‚ÇÇ x })
          }


comp-MWKS-MRENS-drop : ‚àÄ {d d‚Ä≤ g n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms d g n)
                                    ‚Üí MRENS (drop e) x ‚â° (MWKS ‚àò MRENS e) x
comp-MWKS-MRENS-drop e ‚àô       = refl
comp-MWKS-MRENS-drop e (x , M) = _,_ & comp-MWKS-MRENS-drop e x ‚äó comp-MWK-MREN-drop e M


comp-MWKS-MRENS-keep : ‚àÄ {d d‚Ä≤ g n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms d g n)
                                    ‚Üí (MRENS (keep e) ‚àò MWKS) x ‚â° (MWKS ‚àò MRENS e) x
comp-MWKS-MRENS-keep e ‚àô       = refl
comp-MWKS-MRENS-keep e (x , M) = _,_ & comp-MWKS-MRENS-keep e x ‚äó comp-MWK-MREN-keep e M


--------------------------------------------------------------------------------


id-MRENS‚ÇÅ : ‚àÄ {d n} ‚Üí (x : Terms‚ÇÅ d n)
                    ‚Üí MRENS‚ÇÅ id‚â• x ‚â° x
id-MRENS‚ÇÅ x = id-MRENS x


comp-MRENS‚ÇÅ : ‚àÄ {d d‚Ä≤ d‚Ä≥ n} ‚Üí (e‚ÇÅ : d‚Ä≤ ‚â• d) (e‚ÇÇ : d‚Ä≥ ‚â• d‚Ä≤) (x : Terms‚ÇÅ d n)
                            ‚Üí MRENS‚ÇÅ (e‚ÇÅ ‚àò e‚ÇÇ) x ‚â° (MRENS‚ÇÅ e‚ÇÇ ‚àò MRENS‚ÇÅ e‚ÇÅ) x
comp-MRENS‚ÇÅ e‚ÇÅ e‚ÇÇ x = comp-MRENS e‚ÇÅ e‚ÇÇ x


ùêåùêëùêÑùêçùêí‚ÇÅ : ‚àÄ {n} ‚Üí Presheaf (flip Terms‚ÇÅ n) MRENS‚ÇÅ
ùêåùêëùêÑùêçùêí‚ÇÅ = record
           { id‚Ñ±   = funext! id-MRENS‚ÇÅ
           ; comp‚Ñ± = \ e‚ÇÅ e‚ÇÇ ‚Üí funext! (comp-MRENS‚ÇÅ e‚ÇÅ e‚ÇÇ)
           }


comp-MWKS‚ÇÅ-MRENS‚ÇÅ-keep : ‚àÄ {d d‚Ä≤ n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms‚ÇÅ d n)
                                    ‚Üí (MRENS‚ÇÅ (keep e) ‚àò MWKS‚ÇÅ) x ‚â° (MWKS‚ÇÅ ‚àò MRENS‚ÇÅ e) x
comp-MWKS‚ÇÅ-MRENS‚ÇÅ-keep e x = comp-MWKS-MRENS-keep e x


comp-MLIFTS‚ÇÅ-MRENS‚ÇÅ : ‚àÄ {d d‚Ä≤ n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms‚ÇÅ d n)
                                 ‚Üí (MRENS‚ÇÅ (keep e) ‚àò MLIFTS‚ÇÅ) x ‚â° (MLIFTS‚ÇÅ ‚àò MRENS‚ÇÅ e) x
comp-MLIFTS‚ÇÅ-MRENS‚ÇÅ e x = (_, MVZ) & comp-MWKS‚ÇÅ-MRENS‚ÇÅ-keep e x


--------------------------------------------------------------------------------


comp-REN-GET : ‚àÄ {d g g‚Ä≤ n} ‚Üí (e : g‚Ä≤ ‚â• g) (x : Terms d g n) (i : Fin n)
                            ‚Üí GET (RENS e x) i ‚â° (REN e ‚àò GET x) i
comp-REN-GET e (x , M) zero    = refl
comp-REN-GET e (x , N) (suc i) = comp-REN-GET e x i


VAR-id-GET : ‚àÄ {d g} ‚Üí (i : Fin g)
                     ‚Üí GET (IDS {d = d}) i ‚â° VAR i
VAR-id-GET zero    = refl
VAR-id-GET (suc i) = comp-REN-GET (drop id‚â•) IDS i
                   ‚ãÆ WK & VAR-id-GET i
                   ‚ãÆ (\ i‚Ä≤ ‚Üí VAR (suc i‚Ä≤)) & id-REN‚àã i


--------------------------------------------------------------------------------


comp-MREN-GET : ‚àÄ {d d‚Ä≤ g n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms d g n) (i : Fin n)
                             ‚Üí GET (MRENS e x) i ‚â° (MREN e ‚àò GET x) i
comp-MREN-GET e (x , M) zero    = refl
comp-MREN-GET e (x , N) (suc i) = comp-MREN-GET e x i


--------------------------------------------------------------------------------


comp-MREN-GET‚ÇÅ : ‚àÄ {d d‚Ä≤ n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms‚ÇÅ d n) (i : Fin n)
                            ‚Üí GET (MRENS‚ÇÅ e x) i ‚â° (MREN e ‚àò GET x) i
comp-MREN-GET‚ÇÅ e (x , M) zero    = refl
comp-MREN-GET‚ÇÅ e (x , N) (suc i) = comp-MREN-GET‚ÇÅ e x i


MVAR-id-GET‚ÇÅ : ‚àÄ {d} ‚Üí (i : Fin d)
                     ‚Üí GET MIDS‚ÇÅ i ‚â° MVAR i
MVAR-id-GET‚ÇÅ zero    = refl
MVAR-id-GET‚ÇÅ (suc i) = comp-MREN-GET‚ÇÅ (drop id‚â•) MIDS‚ÇÅ i
                     ‚ãÆ MWK & MVAR-id-GET‚ÇÅ i
                     ‚ãÆ (\ i‚Ä≤ ‚Üí MVAR (suc i‚Ä≤)) & id-REN‚àã i


--------------------------------------------------------------------------------


comp-RENS-GETS : ‚àÄ {d g g‚Ä≤ n n‚Ä≤} ‚Üí (e‚ÇÅ : g‚Ä≤ ‚â• g) (x : Terms d g n‚Ä≤) (e‚ÇÇ : n‚Ä≤ ‚â• n)
                                 ‚Üí GETS (RENS e‚ÇÅ x) e‚ÇÇ ‚â° (RENS e‚ÇÅ ‚àò GETS x) e‚ÇÇ
comp-RENS-GETS e‚ÇÅ ‚àô       done      = refl
comp-RENS-GETS e‚ÇÅ (x , N) (drop e‚ÇÇ) = comp-RENS-GETS e‚ÇÅ x e‚ÇÇ
comp-RENS-GETS e‚ÇÅ (x , M) (keep e‚ÇÇ) = (_, REN e‚ÇÅ M) & comp-RENS-GETS e‚ÇÅ x e‚ÇÇ


comp-LIFTS-GETS : ‚àÄ {d g n n‚Ä≤} ‚Üí (x : Terms d g n‚Ä≤) (e : n‚Ä≤ ‚â• n)
                               ‚Üí GETS (LIFTS x) (keep e) ‚â° (LIFTS ‚àò GETS x) e
comp-LIFTS-GETS x e = (_, VZ) & comp-RENS-GETS (drop id‚â•) x e


--------------------------------------------------------------------------------


comp-MRENS-GETS : ‚àÄ {d d‚Ä≤ g n n‚Ä≤} ‚Üí (e‚ÇÅ : d‚Ä≤ ‚â• d) (x : Terms d g n‚Ä≤) (e‚ÇÇ : n‚Ä≤ ‚â• n)
                                  ‚Üí GETS (MRENS e‚ÇÅ x) e‚ÇÇ ‚â° (MRENS e‚ÇÅ ‚àò GETS x) e‚ÇÇ
comp-MRENS-GETS e‚ÇÅ ‚àô       done      = refl
comp-MRENS-GETS e‚ÇÅ (x , N) (drop e‚ÇÇ) = comp-MRENS-GETS e‚ÇÅ x e‚ÇÇ
comp-MRENS-GETS e‚ÇÅ (x , M) (keep e‚ÇÇ) = (_, MREN e‚ÇÅ M) & comp-MRENS-GETS e‚ÇÅ x e‚ÇÇ


--------------------------------------------------------------------------------


comp-MRENS‚ÇÅ-GETS : ‚àÄ {d d‚Ä≤ n n‚Ä≤} ‚Üí (e‚ÇÅ : d‚Ä≤ ‚â• d) (x : Terms‚ÇÅ d n‚Ä≤) (e‚ÇÇ : n‚Ä≤ ‚â• n)
                                 ‚Üí GETS (MRENS‚ÇÅ e‚ÇÅ x) e‚ÇÇ ‚â° (MRENS‚ÇÅ e‚ÇÅ ‚àò GETS x) e‚ÇÇ
comp-MRENS‚ÇÅ-GETS e‚ÇÅ x e‚ÇÇ = comp-MRENS-GETS e‚ÇÅ x e‚ÇÇ


comp-MLIFTS‚ÇÅ-GETS : ‚àÄ {d n n‚Ä≤} ‚Üí (x : Terms‚ÇÅ d n‚Ä≤) (e : n‚Ä≤ ‚â• n)
                               ‚Üí GETS (MLIFTS‚ÇÅ x) (keep e) ‚â° (MLIFTS‚ÇÅ ‚àò GETS x) e
comp-MLIFTS‚ÇÅ-GETS x e = (_, MVZ) & comp-MRENS‚ÇÅ-GETS (drop id‚â•) x e


--------------------------------------------------------------------------------


comp-SUB-GET : ‚àÄ {d g n m} ‚Üí (x : Terms d g n) (y : Terms d n m) (i : Fin m)
                           ‚Üí GET (SUBS x y) i ‚â° (SUB x ‚àò GET y) i
comp-SUB-GET x (y , M) zero    = refl
comp-SUB-GET x (y , N) (suc i) = comp-SUB-GET x y i


--------------------------------------------------------------------------------


comp-MSUB-GET : ‚àÄ {d g n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms n g m) (i : Fin m)
                            ‚Üí GET (MSUBS x y) i ‚â° (MSUB x ‚àò GET y) i
comp-MSUB-GET x (y , M) zero    = refl
comp-MSUB-GET x (y , N) (suc i) = comp-MSUB-GET x y i


--------------------------------------------------------------------------------


comp-MSUB-GET‚ÇÅ : ‚àÄ {d n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms‚ÇÅ n m) (i : Fin m)
                           ‚Üí GET (MSUBS‚ÇÅ x y) i ‚â° (MSUB x ‚àò GET y) i
comp-MSUB-GET‚ÇÅ x (y , M) zero    = refl
comp-MSUB-GET‚ÇÅ x (y , N) (suc i) = comp-MSUB-GET‚ÇÅ x y i


--------------------------------------------------------------------------------


comp-SUB-REN : ‚àÄ {d g n n‚Ä≤} ‚Üí (x : Terms d g n‚Ä≤) (e : n‚Ä≤ ‚â• n) (M : Term d n)
                            ‚Üí SUB (GETS x e) M ‚â° (SUB x ‚àò REN e) M
comp-SUB-REN x e (VAR i)      = comp-GET-REN‚àã x e i
comp-SUB-REN x e (LAM M)      = LAM & ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ M) & comp-LIFTS-GETS x e ‚Åª¬π
                                      ‚ãÆ comp-SUB-REN (LIFTS x) (keep e) M
                                      )
comp-SUB-REN x e (APP M N)    = APP & comp-SUB-REN x e M ‚äó comp-SUB-REN x e N
comp-SUB-REN x e (MVAR i)     = refl
comp-SUB-REN x e (BOX M)      = refl
comp-SUB-REN x e (LETBOX M N) = LETBOX & comp-SUB-REN x e M
                                       ‚äó ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ N) & comp-MRENS-GETS (drop id‚â•) x e ‚Åª¬π
                                         ‚ãÆ comp-SUB-REN (MWKS x) e N
                                         )


--------------------------------------------------------------------------------


-- TODO: Better name?

expand-SUB : ‚àÄ {d g n} ‚Üí (x : Terms d g n) (M : Term d g) (N : Term d n)
                       ‚Üí SUB (x , M) (WK N) ‚â° SUB x N
expand-SUB x M N = comp-SUB-REN (x , M) (drop id‚â•) N ‚Åª¬π
                 ‚ãÆ (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ N) & id-GETS x


expand-SUBS : ‚àÄ {d g n m} ‚Üí (x : Terms d g n) (M : Term d g) (y : Terms d n m)
                          ‚Üí SUBS (x , M) (WKS y) ‚â° SUBS x y
expand-SUBS x M ‚àô       = refl
expand-SUBS x M (y , N) = _,_ & expand-SUBS x M y ‚äó expand-SUB x M N


--------------------------------------------------------------------------------


comp-REN-SUB : ‚àÄ {d g g‚Ä≤ n} ‚Üí (e : g‚Ä≤ ‚â• g) (x : Terms d g n) (M : Term d n)
                            ‚Üí SUB (RENS e x) M ‚â° (REN e ‚àò SUB x) M
comp-REN-SUB e x (VAR i)      = comp-REN-GET e x i
comp-REN-SUB e x (LAM M)      = LAM & ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ M) & comp-LIFTS-RENS e x ‚Åª¬π
                                      ‚ãÆ comp-REN-SUB (keep e) (LIFTS x) M
                                      )
comp-REN-SUB e x (APP M N)    = APP & comp-REN-SUB e x M ‚äó comp-REN-SUB e x N
comp-REN-SUB e x (MVAR i)     = refl
comp-REN-SUB e x (BOX M)      = refl
comp-REN-SUB e x (LETBOX M N) = LETBOX & comp-REN-SUB e x M
                                       ‚äó ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ N) & comp-RENS-MRENS (drop id‚â•) e x
                                         ‚ãÆ comp-REN-SUB e (MWKS x) N
                                         )


comp-RENS-SUBS : ‚àÄ {d g g‚Ä≤ n m} ‚Üí (e : g‚Ä≤ ‚â• g) (x : Terms d g n) (y : Terms d n m)
                                ‚Üí SUBS (RENS e x) y ‚â° (RENS e ‚àò SUBS x) y
comp-RENS-SUBS e x ‚àô       = refl
comp-RENS-SUBS e x (y , M) = _,_ & comp-RENS-SUBS e x y ‚äó comp-REN-SUB e x M


comp-LIFTS-SUBS : ‚àÄ {d g n m} ‚Üí (x : Terms d g n) (y : Terms d n m)
                              ‚Üí SUBS (LIFTS x) (LIFTS y) ‚â° (LIFTS ‚àò SUBS x) y
comp-LIFTS-SUBS x y = (_, VZ) & ( expand-SUBS (WKS x) VZ y
                                ‚ãÆ comp-RENS-SUBS (drop id‚â•) x y
                                )


--------------------------------------------------------------------------------


id-MREN-SUB : ‚àÄ {d d‚Ä≤ g} ‚Üí (e : d‚Ä≤ ‚â• d) (M : Term d‚Ä≤ g)
                         ‚Üí SUB (MRENS e IDS) M ‚â° M
id-MREN-SUB e (VAR i)      = comp-MREN-GET e IDS i
                           ‚ãÆ MREN e & VAR-id-GET i
id-MREN-SUB e (LAM M)      = LAM & ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ M) & comp-LIFTS-MRENS e IDS ‚Åª¬π
                                   ‚ãÆ id-MREN-SUB e M
                                   )
id-MREN-SUB e (APP M N)    = APP & id-MREN-SUB e M ‚äó id-MREN-SUB e N
id-MREN-SUB e (MVAR i)     = refl
id-MREN-SUB e (BOX M)      = refl
id-MREN-SUB e (LETBOX M N) = LETBOX & id-MREN-SUB e M
                                    ‚äó ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ N) & comp-MWKS-MRENS-drop e IDS ‚Åª¬π
                                      ‚ãÆ id-MREN-SUB (drop e) N
                                      )


comp-MREN-SUB : ‚àÄ {d d‚Ä≤ g n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms d g n) (M : Term d n)
                             ‚Üí SUB (MRENS e x) (MREN e M) ‚â° (MREN e ‚àò SUB x) M
comp-MREN-SUB e x (VAR i)      = comp-MREN-GET e x i
comp-MREN-SUB e x (LAM M)      = LAM & ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ (MREN e M)) & comp-LIFTS-MRENS e x ‚Åª¬π
                                       ‚ãÆ comp-MREN-SUB e (LIFTS x) M
                                       )
comp-MREN-SUB e x (APP M N)    = APP & comp-MREN-SUB e x M ‚äó comp-MREN-SUB e x N
comp-MREN-SUB e x (MVAR i)     = refl
comp-MREN-SUB e x (BOX M)      = refl
comp-MREN-SUB e x (LETBOX M N) = LETBOX & comp-MREN-SUB e x M
                                        ‚äó ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ (MREN (keep e) N)) & comp-MWKS-MRENS-keep e x ‚Åª¬π
                                          ‚ãÆ comp-MREN-SUB (keep e) (MWKS x) N
                                          )


comp-MRENS-SUBS : ‚àÄ {d d‚Ä≤ g n m} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms d g n) (y : Terms d n m)
                                 ‚Üí SUBS (MRENS e x) (MRENS e y) ‚â° (MRENS e ‚àò SUBS x) y
comp-MRENS-SUBS e x ‚àô       = refl
comp-MRENS-SUBS e x (y , M) = _,_ & comp-MRENS-SUBS e x y ‚äó comp-MREN-SUB e x M


--------------------------------------------------------------------------------


id-SUB : ‚àÄ {d g} ‚Üí (M : Term d g)
                 ‚Üí SUB IDS M ‚â° M
id-SUB (VAR i)      = VAR-id-GET i
id-SUB (LAM M)      = LAM & id-SUB M
id-SUB (APP M N)    = APP & id-SUB M ‚äó id-SUB N
id-SUB (MVAR i)     = refl
id-SUB (BOX M)      = refl
id-SUB (LETBOX M N) = LETBOX & id-SUB M ‚äó id-MREN-SUB (drop id‚â•) N


comp-SUB : ‚àÄ {d g m n} ‚Üí (x : Terms d g n) (y : Terms d n m) (M : Term d m)
                       ‚Üí SUB (SUBS x y) M ‚â° (SUB x ‚àò SUB y) M
comp-SUB x y (VAR i)      = comp-SUB-GET x y i
comp-SUB x y (LAM M)      = LAM & ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ M) & comp-LIFTS-SUBS x y ‚Åª¬π
                                  ‚ãÆ comp-SUB (LIFTS x) (LIFTS y) M
                                  )
comp-SUB x y (APP M N)    = APP & comp-SUB x y M ‚äó comp-SUB x y N
comp-SUB x y (MVAR i)     = refl
comp-SUB x y (BOX M)      = refl
comp-SUB x y (LETBOX M N) = LETBOX & comp-SUB x y M
                                   ‚äó ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ N) & comp-MRENS-SUBS (drop id‚â•) x y ‚Åª¬π
                                     ‚ãÆ comp-SUB (MWKS x) (MWKS y) N
                                     )


lid-SUBS : ‚àÄ {d g n} ‚Üí (x : Terms d g n)
                     ‚Üí SUBS IDS x ‚â° x
lid-SUBS ‚àô       = refl
lid-SUBS (x , M) = _,_ & lid-SUBS x ‚äó id-SUB M


rid-SUBS : ‚àÄ {d g n} ‚Üí (x : Terms d g n)
                     ‚Üí SUBS x IDS ‚â° x
rid-SUBS ‚àô       = refl
rid-SUBS (x , M) = (_, M) & ( expand-SUBS x M IDS
                            ‚ãÆ rid-SUBS x
                            )


assoc-SUBS : ‚àÄ {d g n m o} ‚Üí (x : Terms d g n) (y : Terms d n m) (z : Terms d m o)
                           ‚Üí SUBS (SUBS x y) z ‚â° SUBS x (SUBS y z)
assoc-SUBS x y ‚àô       = refl
assoc-SUBS x y (z , M) = _,_ & assoc-SUBS x y z ‚äó comp-SUB x y M


instance
  ùêíùüíùêìùêûùê´ùê¶ùê¨ : ‚àÄ {d} ‚Üí Category Nat (Terms d)
  ùêíùüíùêìùêûùê´ùê¶ùê¨ = record
              { id     = IDS
              ; _‚àò_    = flip SUBS
              ; lid‚àò   = rid-SUBS
              ; rid‚àò   = lid-SUBS
              ; assoc‚àò = \ z y x ‚Üí assoc-SUBS x y z ‚Åª¬π
              }


ùêíùêîùêÅ : ‚àÄ {d} ‚Üí Presheaf (Term d) SUB
ùêíùêîùêÅ = record
        { id‚Ñ±   = funext! id-SUB
        ; comp‚Ñ± = \ y x ‚Üí funext! (comp-SUB x y)
        }


--------------------------------------------------------------------------------


comp-MSUB-REN : ‚àÄ {d g g‚Ä≤ n} ‚Üí (x : Terms‚ÇÅ d n) (e : g‚Ä≤ ‚â• g) (M : Term n g)
                             ‚Üí (REN e ‚àò MSUB x) M ‚â° (MSUB x ‚àò REN e) M
comp-MSUB-REN x e (VAR i)      = refl
comp-MSUB-REN x e (LAM M)      = LAM & comp-MSUB-REN x (keep e) M
comp-MSUB-REN x e (APP M N)    = APP & comp-MSUB-REN x e M ‚äó comp-MSUB-REN x e N
comp-MSUB-REN x e (MVAR i)     = comp-REN-SUB e ‚àô (GET x i) ‚Åª¬π
comp-MSUB-REN x e (BOX M)      = refl
comp-MSUB-REN x e (LETBOX M N) = LETBOX & comp-MSUB-REN x e M ‚äó comp-MSUB-REN (MLIFTS‚ÇÅ x) e N


comp-MSUBS-RENS : ‚àÄ {d g g‚Ä≤ n m} ‚Üí (x : Terms‚ÇÅ d n) (e : g‚Ä≤ ‚â• g) (y : Terms n g m)
                                 ‚Üí (RENS e ‚àò MSUBS x) y ‚â° (MSUBS x ‚àò RENS e) y
comp-MSUBS-RENS x e ‚àô       = refl
comp-MSUBS-RENS x e (y , M) = _,_ & comp-MSUBS-RENS x e y ‚äó comp-MSUB-REN x e M


comp-MSUBS-LIFTS : ‚àÄ {d g n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms n g m)
                               ‚Üí (LIFTS ‚àò MSUBS x) y ‚â° (MSUBS x ‚àò LIFTS) y
comp-MSUBS-LIFTS x y = (_, VZ) & comp-MSUBS-RENS x (drop id‚â•) y


--------------------------------------------------------------------------------


comp-MSUB-MREN : ‚àÄ {d g n n‚Ä≤} ‚Üí (x : Terms‚ÇÅ d n‚Ä≤) (e : n‚Ä≤ ‚â• n) (M : Term n g)
                              ‚Üí MSUB (GETS x e) M ‚â° (MSUB x ‚àò MREN e) M
comp-MSUB-MREN x e (VAR i)      = refl
comp-MSUB-MREN x e (LAM M)      = LAM & comp-MSUB-MREN x e M
comp-MSUB-MREN x e (APP M N)    = APP & comp-MSUB-MREN x e M ‚äó comp-MSUB-MREN x e N
comp-MSUB-MREN x e (MVAR i)     = SUB ‚àô & comp-GET-REN‚àã x e i
comp-MSUB-MREN x e (BOX M)      = BOX & comp-MSUB-MREN x e M
comp-MSUB-MREN x e (LETBOX M N) = LETBOX & comp-MSUB-MREN x e M
                                         ‚äó ( (\ x‚Ä≤ ‚Üí MSUB x‚Ä≤ N) & comp-MLIFTS‚ÇÅ-GETS x e ‚Åª¬π
                                           ‚ãÆ comp-MSUB-MREN (MLIFTS‚ÇÅ x) (keep e) N
                                           )


--------------------------------------------------------------------------------


-- TODO: Better name?

expand-MSUB : ‚àÄ {d g n} ‚Üí (x : Terms‚ÇÅ d n) (M : Term‚ÇÅ d) (N : Term n g)
                        ‚Üí MSUB (x , M) (MWK N) ‚â° MSUB x N
expand-MSUB x M N = comp-MSUB-MREN (x , M) (drop id‚â•) N ‚Åª¬π
                  ‚ãÆ (\ x‚Ä≤ ‚Üí MSUB x‚Ä≤ N) & id-GETS x


expand-MSUBS : ‚àÄ {d g n m} ‚Üí (x : Terms‚ÇÅ d n) (M : Term‚ÇÅ d) (y : Terms n g m)
                           ‚Üí MSUBS (x , M) (MWKS y) ‚â° MSUBS x y
expand-MSUBS x M ‚àô       = refl
expand-MSUBS x M (y , N) = _,_ & expand-MSUBS x M y ‚äó expand-MSUB x M N


expand-MSUBS‚ÇÅ : ‚àÄ {d n m} ‚Üí (x : Terms‚ÇÅ d n) (M : Term‚ÇÅ d) (y : Terms‚ÇÅ n m)
                          ‚Üí MSUBS‚ÇÅ (x , M) (MWKS‚ÇÅ y) ‚â° MSUBS‚ÇÅ x y
expand-MSUBS‚ÇÅ x M y = expand-MSUBS x M y


--------------------------------------------------------------------------------


comp-MREN-MSUB : ‚àÄ {d d‚Ä≤ g n} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms‚ÇÅ d n) (M : Term n g)
                              ‚Üí MSUB (MRENS‚ÇÅ e x) M ‚â° (MREN e ‚àò MSUB x) M
comp-MREN-MSUB e x (VAR i)      = refl
comp-MREN-MSUB e x (LAM M)      = LAM & comp-MREN-MSUB e x M
comp-MREN-MSUB e x (APP M N)    = APP & comp-MREN-MSUB e x M ‚äó comp-MREN-MSUB e x N
comp-MREN-MSUB e x (MVAR i)     = SUB ‚àô & comp-MREN-GET‚ÇÅ e x i
                                ‚ãÆ comp-MREN-SUB e ‚àô (GET x i)
comp-MREN-MSUB e x (BOX M)      = BOX & comp-MREN-MSUB e x M
comp-MREN-MSUB e x (LETBOX M N) = LETBOX & comp-MREN-MSUB e x M
                                         ‚äó ( (\ x‚Ä≤ ‚Üí MSUB x‚Ä≤ N) & comp-MLIFTS‚ÇÅ-MRENS‚ÇÅ e x ‚Åª¬π
                                           ‚ãÆ comp-MREN-MSUB (keep e) (MLIFTS‚ÇÅ x) N
                                           )


comp-MRENS-MSUBS : ‚àÄ {d d‚Ä≤ g n m} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms‚ÇÅ d n) (y : Terms n g m)
                                  ‚Üí MSUBS (MRENS‚ÇÅ e x) y ‚â° (MRENS e ‚àò MSUBS x) y
comp-MRENS-MSUBS e x ‚àô       = refl
comp-MRENS-MSUBS e x (y , M) = _,_ & comp-MRENS-MSUBS e x y ‚äó comp-MREN-MSUB e x M


comp-MWKS-MSUBS : ‚àÄ {d g n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms n g m)
                              ‚Üí (MSUBS (MLIFTS‚ÇÅ x) ‚àò MWKS) y ‚â° (MWKS ‚àò MSUBS x) y
comp-MWKS-MSUBS x y = expand-MSUBS (MWKS‚ÇÅ x) MVZ y
                    ‚ãÆ comp-MRENS-MSUBS (drop id‚â•) x y


comp-MRENS‚ÇÅ-MSUBS‚ÇÅ : ‚àÄ {d d‚Ä≤ n m} ‚Üí (e : d‚Ä≤ ‚â• d) (x : Terms‚ÇÅ d n) (y : Terms‚ÇÅ n m)
                                  ‚Üí MSUBS‚ÇÅ (MRENS‚ÇÅ e x) y ‚â° (MRENS‚ÇÅ e ‚àò MSUBS‚ÇÅ x) y
comp-MRENS‚ÇÅ-MSUBS‚ÇÅ e x y = comp-MRENS-MSUBS e x y


comp-MWKS‚ÇÅ-MSUBS‚ÇÅ : ‚àÄ {d n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms‚ÇÅ n m)
                              ‚Üí (MSUBS‚ÇÅ (MLIFTS‚ÇÅ x) ‚àò MWKS‚ÇÅ) y ‚â° (MWKS‚ÇÅ ‚àò MSUBS‚ÇÅ x) y
comp-MWKS‚ÇÅ-MSUBS‚ÇÅ x y = expand-MSUBS‚ÇÅ (MWKS‚ÇÅ x) MVZ y
                      ‚ãÆ comp-MRENS‚ÇÅ-MSUBS‚ÇÅ (drop id‚â•) x y


comp-MLIFTS‚ÇÅ-MSUBS‚ÇÅ : ‚àÄ {d n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms‚ÇÅ n m)
                                ‚Üí (MSUBS‚ÇÅ (MLIFTS‚ÇÅ x) ‚àò MLIFTS‚ÇÅ) y ‚â° (MLIFTS‚ÇÅ ‚àò MSUBS‚ÇÅ x) y
comp-MLIFTS‚ÇÅ-MSUBS‚ÇÅ x y = (_, MVZ) & comp-MWKS‚ÇÅ-MSUBS‚ÇÅ x y


--------------------------------------------------------------------------------


comp-MSUB-SUB : ‚àÄ {d g n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms n g m) (M : Term n m)
                            ‚Üí (SUB (MSUBS x y) ‚àò MSUB x) M ‚â° (MSUB x ‚àò SUB y) M
comp-MSUB-SUB x y (VAR i)      = comp-MSUB-GET x y i
comp-MSUB-SUB x y (LAM M)      = LAM & ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ (MSUB x M)) & comp-MSUBS-LIFTS x y
                                       ‚ãÆ comp-MSUB-SUB x (LIFTS y) M
                                       )
comp-MSUB-SUB x y (APP M N)    = APP & comp-MSUB-SUB x y M ‚äó comp-MSUB-SUB x y N
comp-MSUB-SUB x y (MVAR i)     = comp-SUB (MSUBS x y) ‚àô (GET x i) ‚Åª¬π
comp-MSUB-SUB x y (BOX M)      = refl
comp-MSUB-SUB x y (LETBOX M N) = LETBOX & comp-MSUB-SUB x y M
                                        ‚äó ( (\ x‚Ä≤ ‚Üí SUB x‚Ä≤ (MSUB (MWKS‚ÇÅ x , MVZ) N)) & comp-MWKS-MSUBS x y ‚Åª¬π
                                          ‚ãÆ comp-MSUB-SUB (MLIFTS‚ÇÅ x) (MWKS y) N
                                          )


--------------------------------------------------------------------------------


id-MSUB : ‚àÄ {d g} ‚Üí (M : Term d g)
                  ‚Üí MSUB MIDS‚ÇÅ M ‚â° M
id-MSUB (VAR i)      = refl
id-MSUB (LAM M)      = LAM & id-MSUB M
id-MSUB (APP M N)    = APP & id-MSUB M ‚äó id-MSUB N
id-MSUB (MVAR i)     = SUB ‚àô & MVAR-id-GET‚ÇÅ i
id-MSUB (BOX M)      = BOX & id-MSUB M
id-MSUB (LETBOX M N) = LETBOX & id-MSUB M ‚äó id-MSUB N


comp-MSUB : ‚àÄ {d g n m} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms‚ÇÅ n m) (M : Term m g)
                        ‚Üí MSUB (MSUBS‚ÇÅ x y) M ‚â° (MSUB x ‚àò MSUB y) M
comp-MSUB x y (VAR i)      = refl
comp-MSUB x y (LAM M)      = LAM & comp-MSUB x y M
comp-MSUB x y (APP M N)    = APP & comp-MSUB x y M ‚äó comp-MSUB x y N
comp-MSUB x y (MVAR i)     = SUB ‚àô & comp-MSUB-GET‚ÇÅ x y i
                           ‚ãÆ comp-MSUB-SUB x ‚àô (GET y i)
comp-MSUB x y (BOX M)      = BOX & comp-MSUB x y M
comp-MSUB x y (LETBOX M N) = LETBOX & comp-MSUB x y M
                                    ‚äó ( (\ x‚Ä≤ ‚Üí MSUB x‚Ä≤ N) & comp-MLIFTS‚ÇÅ-MSUBS‚ÇÅ x y ‚Åª¬π
                                      ‚ãÆ comp-MSUB (MLIFTS‚ÇÅ x) (MLIFTS‚ÇÅ y) N
                                      )


lid-MSUBS‚ÇÅ : ‚àÄ {d n} ‚Üí (x : Terms‚ÇÅ d n)
                     ‚Üí MSUBS‚ÇÅ MIDS‚ÇÅ x ‚â° x
lid-MSUBS‚ÇÅ ‚àô       = refl
lid-MSUBS‚ÇÅ (x , M) = _,_ & lid-MSUBS‚ÇÅ x ‚äó id-MSUB M


rid-MSUBS‚ÇÅ : ‚àÄ {d n} ‚Üí (x : Terms‚ÇÅ d n)
                     ‚Üí MSUBS‚ÇÅ x MIDS‚ÇÅ ‚â° x
rid-MSUBS‚ÇÅ ‚àô       = refl
rid-MSUBS‚ÇÅ (x , M) = _,_ & ( expand-MSUBS‚ÇÅ x M MIDS‚ÇÅ
                           ‚ãÆ rid-MSUBS‚ÇÅ x
                           )
                         ‚äó id-SUB M


assoc-MSUBS‚ÇÅ : ‚àÄ {d n m o} ‚Üí (x : Terms‚ÇÅ d n) (y : Terms‚ÇÅ n m) (z : Terms‚ÇÅ m o)
                           ‚Üí MSUBS‚ÇÅ (MSUBS‚ÇÅ x y) z ‚â° MSUBS‚ÇÅ x (MSUBS‚ÇÅ y z)
assoc-MSUBS‚ÇÅ x y ‚àô       = refl
assoc-MSUBS‚ÇÅ x y (z , M) = _,_ & assoc-MSUBS‚ÇÅ x y z ‚äó comp-MSUB x y M


instance
  ùêíùüíùêìùêûùê´ùê¶ùê¨‚ÇÅ : Category Nat Terms‚ÇÅ
  ùêíùüíùêìùêûùê´ùê¶ùê¨‚ÇÅ = record
               { id     = MIDS‚ÇÅ
               ; _‚àò_    = flip MSUBS‚ÇÅ
               ; lid‚àò   = rid-MSUBS‚ÇÅ
               ; rid‚àò   = lid-MSUBS‚ÇÅ
               ; assoc‚àò = \ z y x ‚Üí assoc-MSUBS‚ÇÅ x y z ‚Åª¬π
               }


ùêåùêíùêîùêÅ : Presheaf Term‚ÇÅ MSUB
ùêåùêíùêîùêÅ = record
         { id‚Ñ±   = funext! id-MSUB
         ; comp‚Ñ± = \ y x ‚Üí funext! (comp-MSUB x y)
         }


--------------------------------------------------------------------------------
