module FullIPLPropositions where

open import Prelude
open import Category
open import List


--------------------------------------------------------------------------------


infixr 8 _‚äÉ_
data Prop : Set
  where
    Œπ   : String ‚Üí Prop
    _‚äÉ_ : Prop ‚Üí Prop ‚Üí Prop
    _‚àß_ : Prop ‚Üí Prop ‚Üí Prop
    ‚ä§  : Prop
    ‚ä•  : Prop
    _‚à®_ : Prop ‚Üí Prop ‚Üí Prop


~ : Prop ‚Üí Prop
~ A = A ‚äÉ ‚ä•


instance
  PropVar : IsString Prop
  PropVar =
    record
      { Constraint = \ s ‚Üí ùüô
      ; fromString = \ s ‚Üí Œπ s
      }


--------------------------------------------------------------------------------


injŒπ : ‚àÄ {P‚ÇÅ P‚ÇÇ} ‚Üí Œπ P‚ÇÅ ‚â° Œπ P‚ÇÇ
                 ‚Üí P‚ÇÅ ‚â° P‚ÇÇ
injŒπ refl = refl


inj‚äÉ‚ÇÅ : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} ‚Üí A‚ÇÅ ‚äÉ B‚ÇÅ ‚â° A‚ÇÇ ‚äÉ B‚ÇÇ
                        ‚Üí A‚ÇÅ ‚â° A‚ÇÇ
inj‚äÉ‚ÇÅ refl = refl


inj‚äÉ‚ÇÇ : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} ‚Üí A‚ÇÅ ‚äÉ B‚ÇÅ ‚â° A‚ÇÇ ‚äÉ B‚ÇÇ
                        ‚Üí B‚ÇÅ ‚â° B‚ÇÇ
inj‚äÉ‚ÇÇ refl = refl


inj‚àß‚ÇÅ : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} ‚Üí A‚ÇÅ ‚àß B‚ÇÅ ‚â° A‚ÇÇ ‚àß B‚ÇÇ
                        ‚Üí A‚ÇÅ ‚â° A‚ÇÇ
inj‚àß‚ÇÅ refl = refl


inj‚àß‚ÇÇ : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} ‚Üí A‚ÇÅ ‚àß B‚ÇÅ ‚â° A‚ÇÇ ‚àß B‚ÇÇ
                        ‚Üí B‚ÇÅ ‚â° B‚ÇÇ
inj‚àß‚ÇÇ refl = refl


inj‚à®‚ÇÅ : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} ‚Üí A‚ÇÅ ‚à® B‚ÇÅ ‚â° A‚ÇÇ ‚à® B‚ÇÇ
                        ‚Üí A‚ÇÅ ‚â° A‚ÇÇ
inj‚à®‚ÇÅ refl = refl


inj‚à®‚ÇÇ : ‚àÄ {A‚ÇÅ A‚ÇÇ B‚ÇÅ B‚ÇÇ} ‚Üí A‚ÇÅ ‚à® B‚ÇÅ ‚â° A‚ÇÇ ‚à® B‚ÇÇ
                        ‚Üí B‚ÇÅ ‚â° B‚ÇÇ
inj‚à®‚ÇÇ refl = refl


_‚âü‚Çö_ : (A‚ÇÅ A‚ÇÇ : Prop) ‚Üí Dec (A‚ÇÅ ‚â° A‚ÇÇ)
(Œπ P‚ÇÅ) ‚âü‚Çö (Œπ P‚ÇÇ)       with P‚ÇÅ ‚âü‚Çõ P‚ÇÇ
...                    | yes refl = yes refl
...                    | no P‚ÇÅ‚â¢P‚ÇÇ = no (P‚ÇÅ‚â¢P‚ÇÇ ‚àò injŒπ)
(Œπ P‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚äÉ B‚ÇÇ)    = no (\ ())
(Œπ P‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚àß B‚ÇÇ)    = no (\ ())
(Œπ P‚ÇÅ) ‚âü‚Çö ‚ä§           = no (\ ())
(Œπ P‚ÇÅ) ‚âü‚Çö ‚ä•           = no (\ ())
(Œπ P‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚à® B‚ÇÇ)    = no (\ ())
(A‚ÇÅ ‚äÉ B‚ÇÅ) ‚âü‚Çö (Œπ P‚ÇÇ)    = no (\ ())
(A‚ÇÅ ‚äÉ B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚äÉ B‚ÇÇ) with A‚ÇÅ ‚âü‚Çö A‚ÇÇ | B‚ÇÅ ‚âü‚Çö B‚ÇÇ
...                    | yes refl | yes refl = yes refl
...                    | yes refl | no B‚ÇÅ‚â¢B‚ÇÇ = no (B‚ÇÅ‚â¢B‚ÇÇ ‚àò inj‚äÉ‚ÇÇ)
...                    | no A‚ÇÅ‚â¢A‚ÇÇ | _        = no (A‚ÇÅ‚â¢A‚ÇÇ ‚àò inj‚äÉ‚ÇÅ)
(A‚ÇÅ ‚äÉ B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚àß B‚ÇÇ) = no (\ ())
(A‚ÇÅ ‚äÉ B‚ÇÅ) ‚âü‚Çö ‚ä§        = no (\ ())
(A‚ÇÅ ‚äÉ B‚ÇÅ) ‚âü‚Çö ‚ä•        = no (\ ())
(A‚ÇÅ ‚äÉ B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚à® B‚ÇÇ) = no (\ ())
(A‚ÇÅ ‚àß B‚ÇÅ) ‚âü‚Çö (Œπ P‚ÇÇ)    = no (\ ())
(A‚ÇÅ ‚àß B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚äÉ B‚ÇÇ) = no (\ ())
(A‚ÇÅ ‚àß B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚àß B‚ÇÇ) with A‚ÇÅ ‚âü‚Çö A‚ÇÇ | B‚ÇÅ ‚âü‚Çö B‚ÇÇ
...                    | yes refl | yes refl = yes refl
...                    | yes refl | no B‚ÇÅ‚â¢B‚ÇÇ = no (B‚ÇÅ‚â¢B‚ÇÇ ‚àò inj‚àß‚ÇÇ)
...                    | no A‚ÇÅ‚â¢A‚ÇÇ | _        = no (A‚ÇÅ‚â¢A‚ÇÇ ‚àò inj‚àß‚ÇÅ)
(A‚ÇÅ ‚àß B‚ÇÅ) ‚âü‚Çö ‚ä§        = no (\ ())
(A‚ÇÅ ‚àß B‚ÇÅ) ‚âü‚Çö ‚ä•        = no (\ ())
(A‚ÇÅ ‚àß B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚à® B‚ÇÇ) = no (\ ())
‚ä§        ‚âü‚Çö (Œπ P‚ÇÇ)    = no (\ ())
‚ä§        ‚âü‚Çö (A‚ÇÇ ‚äÉ B‚ÇÇ) = no (\ ())
‚ä§        ‚âü‚Çö (A‚ÇÇ ‚àß B‚ÇÇ) = no (\ ())
‚ä§        ‚âü‚Çö ‚ä§        = yes refl
‚ä§        ‚âü‚Çö ‚ä•        = no (\ ())
‚ä§        ‚âü‚Çö (A‚ÇÇ ‚à® B‚ÇÇ) = no (\ ())
‚ä•        ‚âü‚Çö (Œπ P‚ÇÇ)    = no (\ ())
‚ä•        ‚âü‚Çö (A‚ÇÇ ‚äÉ B‚ÇÇ) = no (\ ())
‚ä•        ‚âü‚Çö (A‚ÇÇ ‚àß B‚ÇÇ) = no (\ ())
‚ä•        ‚âü‚Çö ‚ä§        = no (\ ())
‚ä•        ‚âü‚Çö ‚ä•        = yes refl
‚ä•        ‚âü‚Çö (A‚ÇÇ ‚à® B‚ÇÇ) = no (\ ())
(A‚ÇÅ ‚à® B‚ÇÅ) ‚âü‚Çö (Œπ P‚ÇÇ)    = no (\ ())
(A‚ÇÅ ‚à® B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚äÉ B‚ÇÇ) = no (\ ())
(A‚ÇÅ ‚à® B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚àß B‚ÇÇ) = no (\ ())
(A‚ÇÅ ‚à® B‚ÇÅ) ‚âü‚Çö ‚ä§        = no (\ ())
(A‚ÇÅ ‚à® B‚ÇÅ) ‚âü‚Çö ‚ä•        = no (\ ())
(A‚ÇÅ ‚à® B‚ÇÅ) ‚âü‚Çö (A‚ÇÇ ‚à® B‚ÇÇ) with A‚ÇÅ ‚âü‚Çö A‚ÇÇ | B‚ÇÅ ‚âü‚Çö B‚ÇÇ
...                    | yes refl | yes refl = yes refl
...                    | yes refl | no B‚ÇÅ‚â¢B‚ÇÇ = no (B‚ÇÅ‚â¢B‚ÇÇ ‚àò inj‚à®‚ÇÇ)
...                    | no A‚ÇÅ‚â¢A‚ÇÇ | _        = no (A‚ÇÅ‚â¢A‚ÇÇ ‚àò inj‚à®‚ÇÅ)


--------------------------------------------------------------------------------


_‚äÉ‚ãØ‚äÉ_ : List Prop ‚Üí Prop ‚Üí Prop
‚àô       ‚äÉ‚ãØ‚äÉ A = A
(Œû , B) ‚äÉ‚ãØ‚äÉ A = Œû ‚äÉ‚ãØ‚äÉ (B ‚äÉ A)


--------------------------------------------------------------------------------
